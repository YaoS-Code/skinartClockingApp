services:
  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: clockingapp-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: SkinartMD_2024_Root!
      MYSQL_DATABASE: clockingapp
      MYSQL_USER: clockingapp_user
      MYSQL_PASSWORD: SkinartMD_2024_DB!
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - clockingapp-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pSkinartMD_2024_Root!"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 后端API服务
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: clockingapp-server
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DOCKER_ENV: true
      PORT: 13000
      DB_HOST: mysql
      DB_USER: clockingapp_user
      DB_PASSWORD: SkinartMD_2024_DB!
      DB_NAME: clockingapp
      DB_PORT: 3306
      MYSQL_ROOT_PASSWORD: SkinartMD_2024_Root!
      JWT_SECRET: skinartmd_jwt_secret_2024
      IP_WHITELIST_ENABLED: true
      IP_WHITELIST_LOCAL_ONLY: true
      CORS_ORIGIN: http://localhost:3001
    ports:
      - "13000:13000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - clockingapp-network
    volumes:
      - ./server:/app
      - /app/node_modules
    command: sh -c "sleep 10 && npm run init-db && node src/app.js"

  # 前端服务
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:13000}
    container_name: clockingapp-client
    restart: unless-stopped
    ports:
      - "3001:3001"
    depends_on:
      - server
    networks:
      - clockingapp-network
    environment:
      REACT_APP_API_URL: http://localhost:13000

volumes:
  mysql_data:
    driver: local

networks:
  clockingapp-network:
    driver: bridge

